# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Extract data and release

on:
  release:
    types: [published]
  workflow_call:
  workflow_dispatch:

jobs:  
  setup:
    name: Setup bepin + DDC
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Setup Github NPM registry for @dofus-batteries-included namespace
        run: |
          echo @dofus-batteries-included:registry=https://npm.pkg.github.com > ~/.npmrc
          echo //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }} >> ~/.npmrc

      - name: Install Cytrus v6
        run: npm i @dofus-batteries-included/cytrus-v6 -g

      - name: Read current game version  # Use beta for now
        id: read_dofus_version
        run: |
          $CytrusGameVersion=$(cytrus-v6 version -g dofus -b)
          $GameVersion=$CytrusGameVersion.Split("_")[1]
          echo "dofus_version=$GameVersion" >> $Env:GITHUB_OUTPUT
          echo "dofus_path=dofus-beta-$GameVersion" >> $Env:GITHUB_OUTPUT 

      - name: Restore game files
        id: restore_game_files
        uses: actions/cache/restore@v4
        with:
          path: ${{ steps.read_dofus_version.outputs.dofus_path }}
          key: ${{ steps.read_dofus_version.outputs.dofus_path }}

      - name: Download latest game files
        if: ${{ steps.restore_game_files.outputs.cache-hit != 'true' }}
        run: cytrus-v6 download -g dofus -b -o ${{ steps.read_dofus_version.outputs.dofus_path }} # Use beta for now

      - name: Download BepInEx
        run: curl https://builds.bepinex.dev/projects/bepinex_be/697/BepInEx-Unity.IL2CPP-win-x64-6.0.0-be.697%2B5362580.zip -o BepInEx.zip

      - name: Extract BepInEx
        run: 7z x BepInEx.zip -o"${{ steps.read_dofus_version.outputs.dofus_path }}" -aoa

      - name: Run game once
        run: node scripts/bepinex-run-until "${{ steps.read_dofus_version.outputs.dofus_path }}\Dofus.exe" "Chainloader startup complete"
        timeout-minutes: 10

      - name: Read game build id
        id: read_dofus_build_id
        run: echo "dofus_build_id=$(node scripts/read-build-guid.js ${{ steps.read_dofus_version.outputs.dofus_path }}/Dofus_Data/boot.config)" >> $Env:GITHUB_OUTPUT

      - name: Display build information
        run: |
          echo "Build id: ${{ steps.read_dofus_build_id.outputs.dofus_build_id }}"
          echo "Version: ${{ steps.read_dofus_version.outputs.dofus_version }}"

      - name: Create Interop folder
        run: md Interop -Force

      - name: Copy Interop assemblies
        run: copy ${{ steps.read_dofus_version.outputs.dofus_path }}/BepInEx/interop/* Interop/

      - name: Restore dependencies
        run: dotnet restore

      - name: Run CLI
        run: dotnet run DDC.CLI/DDC.CLI.csproj --configuration Release --no-restore ${{ steps.read_dofus_version.outputs.dofus_path }} . ${{ github.workspace }} false

  # extract-types:
  #   name: Extract game data types
  #   runs-on: windows-latest
  #   needs: setup
  #   steps:
  #     - name: Build DDC.ModelExtractor plugin
  #       run: dotnet build DDC.ModelExtractor/DDC.ModelExtractor.csproj --configuration Release --no-restore

  #     - name: Copy plugin
  #       run: copy DDC.ModelExtractor/bin/Release/net6.0/DDC*.dll ${{ steps.read_dofus_version.outputs.dofus_path }}/BepInEx/plugins

  #     - name: Create BepInEx config folder
  #       run: md ${{ steps.read_dofus_version.outputs.dofus_path }}/BepInEx/config -Force

  #     - name: Write DDC.ModelExtractor configuration
  #       run: |
  #         $Configuration = @'
  #         [General]
  #         OutputDirectory = ${{ github.workspace }}/DDC/Generated/
  #         '@
  #         echo "$Configuration" > ${{ steps.read_dofus_version.outputs.dofus_path }}/BepInEx/config/DDC.ModelExtractor.cfg

  #     - name: Run game to extract types
  #       run: node scripts/bepinex-run-until "${{ steps.read_dofus_version.outputs.dofus_path }}\Dofus.exe" "DDC type model generation complete."
        
  #     - name: Cleanup plugin
  #       run: rm ${{ steps.read_dofus_version.outputs.dofus_path }}/BepInEx/plugins/DDC.ModelExtractor.dll

  #     - run: ls "${{ github.workspace }}/DDC/Generated"
  #     # - run: ls "${{ github.workspace }}/DDC/Generated/Core/DataCenter/Metadata/Spell"

      - name: Upload extracted types to artifacts
        if: ${{ github.event_name != 'release' }}
        uses: actions/upload-artifact@v4
        with:
          name: types
          path: ${{ github.workspace }}/DDC/Generated
          if-no-files-found: 'error'
        
  # # extract-data:
  # #   name: Extract game data
  # #   runs-on: windows-latest
  # #   needs: extract-types
  # #   steps:
  #     - name: Build DDC.Extractor plugin
  #       run: dotnet build DDC.Extractor/DDC.Extractor.csproj --configuration Release --no-restore

  #     - name: Copy plugin
  #       run: copy DDC.Extractor/bin/Release/net6.0/DDC*.dll ${{ steps.read_dofus_version.outputs.dofus_path }}/BepInEx/plugins

  #     - name: Create BepInEx config folder
  #       run: md ${{ steps.read_dofus_version.outputs.dofus_path }}/BepInEx/config -Force

  #     - name: Write DDC.Extractor configuration
  #       run: |
  #         $Configuration = @'
  #         [General]
  #         OutputDirectory = ./extracted-data
  #         '@
  #         echo "$Configuration" > ${{ steps.read_dofus_version.outputs.dofus_path }}/BepInEx/config/DDC.Extractor.cfg

  #     - name: Extract data
  #       # run: cd ${{ steps.read_dofus_version.outputs.dofus_path }}; node ../scripts/bepinex-run-until "Dofus.exe" "DDC data extraction complete."
  #       run: node scripts/bepinex-run-until "${{ steps.read_dofus_version.outputs.dofus_path }}\Dofus.exe" "DDC data extraction complete."
  #       timeout-minutes: 30

      - name: Create metadata file
        run: |
          $Metadata = @{
            BepInExVersion = "6.0.0-be.697+5362580" 
            GameBuildId = "${{ steps.read_dofus_build_id.outputs.dofus_build_id }}"
            GameVersion = "${{ steps.read_dofus_version.outputs.dofus_version }}"
          }
          $MetadataJson = $Metadata | ConvertTo-Json
          $null = Write-Host $MetadataJson
          $null = $MetadataJson | Out-File -FilePath "${{ steps.read_dofus_version.outputs.dofus_path }}/extracted-data/metadata.json"

      - name: Create release archive
        if: ${{ github.event_name == 'release' }}
        run: |
          cd ${{ steps.read_dofus_version.outputs.dofus_path }}/extracted-data
          7z a data.zip .

      - name: Upload compiled libraries to release
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.read_dofus_version.outputs.dofus_path }}/extracted-data/data.zip
          asset_name: data.zip
          tag: ${{ github.ref }}

      - name: Upload compiled library to artifacts
        if: ${{ github.event_name != 'release' }}
        uses: actions/upload-artifact@v4
        with:
          name: data
          path: ${{ steps.read_dofus_version.outputs.dofus_path }}/extracted-data
          if-no-files-found: 'error'

permissions:
  contents: write
  packages: read
